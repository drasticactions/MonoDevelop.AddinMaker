<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.ResolveMonoDevelopAddins" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.ResolveMonoDevelopInstance" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.GenerateManifest" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.CollectOutputFiles" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />
  <UsingTask TaskName="MonoDevelop.Addins.Tasks.CreatePackage" AssemblyFile="MonoDevelop.Addins.Tasks.dll" />

  <PropertyGroup>
    <IsAddin Condition="'$(IsAddin)' != 'False'">True</IsAddin>
    <IsPackable Condition="'$(IsPackable)'==''">False</IsPackable>
  </PropertyGroup>

  <PropertyGroup>
    <MDProfilePath Condition="'$(MDProfilePath)' == ''">$(MONODEVELOP_TEST_PROFILE)</MDProfilePath>
  </PropertyGroup>

  <PropertyGroup >
    <_InstallAddinAfterBuild Condition="'$(InstallAddin)'=='True' And '$(IsAddin)'=='True'">True</_InstallAddinAfterBuild>
    <_PackageAddinAfterBuild Condition="'$(CreatePackage)'=='True' And '$(IsAddin)'=='True'">True</_PackageAddinAfterBuild>
    <_RunAddinTestsAfterBuild Condition="'$(RunTests)'=='True' And '$(IsAddin)'!='True'">True</_RunAddinTestsAfterBuild>
  </PropertyGroup>

  <Target Name="_RunAddinTestsAfterBuild" AfterTargets="Build" Condition="'$(_RunAddinTestsAfterBuild)'=='true'" DependsOnTargets="RunTests" />
  <Target Name="_PackageAddinAfterBuild" AfterTargets="Build" Condition="'$(_PackageAddinAfterBuild)'=='true'" DependsOnTargets="PackageAddin" />
  <Target Name="_InstallAddinAfterBuild" AfterTargets="Build" Condition="'$(_InstallAddinAfterBuild)'=='true'" DependsOnTargets="InstallAddin" />

  <ItemGroup>
    <ProjectCapability Include="AddinMaker" />
  </ItemGroup>

  <!--
  NOTE: we cannot update/remove existing default items in our props file, as it is
  imported *before* the default items are created by Microsoft.NET.Sdk.DefaultItems.props.
  Doing it here works, but means that it will override things users do in their csproj.
  Unfortunately there is no way to work around this without adding a new extension point to
  the sdk props.
  -->
  <ItemGroup Condition="'$(EnableDefaultItems)'=='True' and '$(EnableDefaultNoneItems)'=='True'">
    <None Remove="**\*.addin.xml" />
  </ItemGroup>
  <!-- always reference the core addins and assemblies -->
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml" />
    <AddinReference Include="MonoDevelop.Core"/>
    <AddinReference Include="MonoDevelop.Ide"/>
    <Reference Include="Xamarin.Mac">
      <HintPath>\Applications\Visual Studio %28Preview%29.app\Contents\MonoBundle\Xamarin.Mac.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <!-- this is in bin, but core addins don't use it, so we have to make it explicit -->
    <Reference Include="Newtonsoft.Json">
      <Private>False</Private>
    </Reference>
  </ItemGroup>

  <Target Name="ResolveMonoDevelopInstance" BeforeTargets="GetReferenceAssemblyPaths">
    <ResolveMonoDevelopInstance
        ProfileVersion="$(MDProfileVersion)"
        ProfilePath="$(MDProfilePath)"
        BinDir="$(MDBinDir)"
        AppDir="$(MDAppDir)"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
      >
      <Output TaskParameter="ConfigDir"   PropertyName="MDConfigDir"   Condition="'$(MDConfigDir)' == ''"    />
      <Output TaskParameter="AddinsDir"   PropertyName="MDAddinsDir"   Condition="'$(MDAddinsDir)' == ''"    />
      <Output TaskParameter="BinDir" PropertyName="MDBinDir" />
      <Output TaskParameter="ProfileVersion" PropertyName="MDProfileVersion" />
      <Output TaskParameter="TargetFrameworkVersion" PropertyName="TargetFrameworkVersion" />
      <Output TaskParameter="TargetFrameworkMoniker" PropertyName="TargetFrameworkMoniker" />
    </ResolveMonoDevelopInstance>

    <Message Text = "MDBinDir:          $(MDBinDir)" />
    <Message Text = "MDProfileVersion:  $(MDProfileVersion)" />
    <Message Text = "MDConfigDir:       $(MDConfigDir)" />
    <Message Text = "MDAddinsDir:       $(MDAddinsDir)" />

    <PropertyGroup>
      <MDToolExe Condition="Exists('$(MDBinDir)\vstool.exe')">$(MDBinDir)\vstool.exe</MDToolExe>
      <MDToolExe Condition="'$(MDToolExe)'==''">$(MDBinDir)\mdtool.exe</MDToolExe>
      <_MDToolCommand>"$(MDToolExe)"</_MDToolCommand>
      <_MDToolCommand Condition="'$(OS)'=='Unix'">mono "$(MDToolExe)"</_MDToolCommand>
    </PropertyGroup>

    <Error Text = "Bin directory not found: $(MDBinDir)" Condition="!Exists('$(MDToolExe)')" />

    <PropertyGroup>
      <AssemblySearchPaths>$(MDBinDir);$(AssemblySearchPaths)</AssemblySearchPaths>
      <MDDatabaseDir>$(IntermediateOutputPath)mdam\db</MDDatabaseDir>
      <MDConfigDir Condition="'$(MDConfigDir)'==''">$(IntermediateOutputPath)mdam\config</MDConfigDir>
      <MDAddinsDir Condition="'$(MDAddinsDir)'==''">$(IntermediateOutputPath)mdam\addins</MDAddinsDir>
    </PropertyGroup>
  </Target>

  <!-- FIXME logically this should before ResolveReferences but MD currently uses ResolveAssemblyReferences -->
  <Target Name="_MDResolveAddinReferences" DependsOnTargets="ResolveMonoDevelopInstance" BeforeTargets="ResolveAssemblyReferences">
    <ResolveMonoDevelopAddins
      ConfigDir="$(MDConfigDir)"
      AddinsDir="$(MDAddinsDir)"
      DatabaseDir="$(MDDatabaseDir)"
      BinDir="$(MDBinDir)"
      AddinReferences="@(AddinReference)"
      CoreVersionOverride="$(MDCoreVersionOverride)"
    >
      <Output TaskParameter="AssemblyReferences" ItemName ="Reference" />
      <Output TaskParameter="AssemblyReferences" ItemName ="_MDResolvedAddinAssemblies" />
      <Output TaskParameter="ResolvedAddins" ItemName ="_MDResolvedAddins" />
      <Output TaskParameter="VersionDefines" PropertyName ="_MDVersionDefines" />
    </ResolveMonoDevelopAddins>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);$(_MDVersionDefines)</DefineConstants>
    </PropertyGroup>
  </Target>

  <Target Name="_CoreCreatePackage">
    <CreatePackage
      ConfigDir="$(MDConfigDir)"
      AddinsDir="$(MDAddinsDir)"
      DatabaseDir="$(MDDatabaseDir)"
      BinDir="$(MDBinDir)"
      OutputDir="$(OutDir)"
      AddinFile="$(TargetPath)">
          <Output TaskParameter="PackageFile" PropertyName="PackageFile" />
      </CreatePackage>
  </Target>

  <Target Name="_CoreInstallAddin">
    <!-- xbuild doesn't support StandardOutputImportance="Low" -->
    <Exec Command='$(_MDToolCommand) setup install -y "$(PackageFile)"' />
  </Target>

  <Target Name="InstallAddin" DependsOnTargets="PackageAddin;_CoreInstallAddin" />

  <Target Name="PackageAddin" DependsOnTargets="Build;_CoreCreatePackage" />

  <!--
  beforetargets is kinda messy. We can't just go before PrepareResources, because that's _empty_ and actually
  just depends on a bunch of other targets that do the real work, and we need to go before _those_.
  SplitResourcesByCulture seems to be the first.
  -->
  <Target Name="_PrepareAddinResources" BeforeTargets="SplitResourcesByCulture" Condition="'$(IsAddin)' == 'True'" DependsOnTargets="_MDCollectOutputFiles;_MDGenerateManifest" />

  <Target Name="_MDCollectOutputFiles">
    <!--declare this here instead of toplevel so that IntermediateOutputPath has a value w/SDK style projects-->
    <PropertyGroup>
      <_MDAddinFilesManifest>$(IntermediateOutputPath)_Manifest.addin.xml</_MDAddinFilesManifest>
    </PropertyGroup>
    <CollectOutputFiles
        AddinFiles="@(AddinFile)">
      <Output TaskParameter="AddinFilesWithLinkMetadata" ItemName ="_AddinFilesWithLinkMetadata" />
    </CollectOutputFiles>
    <ItemGroup>
      <FileWrites Include="@(_AddinFilesWithLinkMetadata->'$(OutputPath)%(Link)')" />
      <FileWrites Include="$(_MDAddinFilesManifest)" />
      <EmbeddedResource Include="$(_MDAddinFilesManifest)">
        <LogicalName>_Manifest.addin.xml</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <Target Name="_MDCopyOutputFiles"
    Inputs="@(_AddinFilesWithLinkMetadata)"
    Outputs="@(_AddinFilesWithLinkMetadata->'$(OutputPath)%(Link)')"
    BeforeTargets="PrepareForRun"
    Condition="'$(IsAddin)' == 'True'">
    <Copy
      SkipUnchangedFiles="True"
      SourceFiles="@(_AddinFilesWithLinkMetadata)"
      DestinationFiles="@(_AddinFilesWithLinkMetadata->'$(OutputPath)%(Link)')" />
  </Target>

  <Target Name="_MDGenerateManifest"
    Inputs="$(MSBuildAllProjects);@(_MDResolvedAddins->'%(AddinFile)');@(AddinFile)"
    Outputs="$(_MDAddinFilesManifest)">
    <GenerateManifest
      ManifestFile="$(_MDAddinFilesManifest)"
      ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)"
      AddinFilesWithLinkMetadata="@(_AddinFilesWithLinkMetadata)"
      AddinDependencies="@(_MDResolvedAddins)" />
  </Target>

  <!-- when running in MD, the global property provider provides a valid MDBinDir -->
  <PropertyGroup Condition="'$(IsAddin)' != 'True'">
    <TestRunnerCommand Condition="Exists('$(MDBinDir)\vstool.exe')">$(MDBinDir)\vstool.exe</TestRunnerCommand>
    <TestRunnerCommand Condition="'$(TestRunnerCommand)'==''">$(MDBinDir)\mdtool.exe</TestRunnerCommand>
    <TestRunnerArgs>run-md-tests</TestRunnerArgs>
  </PropertyGroup>

  <Target Name="RunTests" DependsOnTargets="ResolveMonoDevelopInstance">
    <Exec Command="$(_MDToolCommand) $(TestRunnerArgs) &quot;$(TargetPath)&quot;" />
  </Target>

  <!--
  SDK Style projects no longer resolve from the GAC, but that's currently the only
  way to resolve GTK#, so add it back into the search path
  -->
  <Target Name="AddGacPath" BeforeTargets="ResolveAssemblyReferences" Condition="'$(NETCoreSdkBundledVersionsProps)'!=''">
    <PropertyGroup>
      <AssemblySearchPaths>$(AssemblySearchPaths);{Gac}</AssemblySearchPaths>
    </PropertyGroup>
  </Target>
</Project>
